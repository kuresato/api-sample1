/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package apis.handler;

import apis.model.Book;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-05-28T15:38:15.832335+09:00[Asia/Tokyo]")

@Validated
@Api(value = "books", description = "the books API")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /books/{bookId}
     *
     * @param bookId Book ID (required)
     * @return delete book (status code 204)
     */
    @ApiOperation(value = "", nickname = "booksBookIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "delete book") })
    @RequestMapping(value = "/books/{bookId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> booksBookIdDelete(@ApiParam(value = "Book ID",required=true) @PathVariable("bookId") String bookId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/{bookId}
     *
     * @param bookId Book ID (required)
     * @return get a book (status code 200)
     */
    @ApiOperation(value = "", nickname = "booksBookIdGet", notes = "", response = Book.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get a book", response = Book.class) })
    @RequestMapping(value = "/books/{bookId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Book> booksBookIdGet(@ApiParam(value = "Book ID",required=true) @PathVariable("bookId") String bookId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"1\", \"title\" : \"TITLE\", \"author\" : \"AUTHOR\", \"author2\" : \"AUTHOR2\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /books/{bookId}
     *
     * @param bookId Book ID (required)
     * @param book  (required)
     * @return create book (status code 201)
     */
    @ApiOperation(value = "", nickname = "booksBookIdPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "create book") })
    @RequestMapping(value = "/books/{bookId}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> booksBookIdPost(@ApiParam(value = "Book ID",required=true) @PathVariable("bookId") String bookId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Book book) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /books/{bookId}
     *
     * @param bookId Book ID (required)
     * @param book  (required)
     * @return update book (status code 204)
     */
    @ApiOperation(value = "", nickname = "booksBookIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "update book") })
    @RequestMapping(value = "/books/{bookId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> booksBookIdPut(@ApiParam(value = "Book ID",required=true) @PathVariable("bookId") String bookId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Book book) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books
     *
     * @return get book list (status code 200)
     */
    @ApiOperation(value = "", nickname = "booksGet", notes = "", response = Book.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get book list", response = Book.class, responseContainer = "List") })
    @RequestMapping(value = "/books",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Book>> booksGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"1\", \"title\" : \"TITLE\", \"author\" : \"AUTHOR\", \"author2\" : \"AUTHOR2\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
